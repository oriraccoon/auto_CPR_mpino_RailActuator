/*

      2024년 6월 2일자 수정본

ver1.2		광전 스위치 센서 테스트
			STOP 스위치 초기 위치로 이동
			
			동작테스트 미실시
			

-----------------할일---------------------
      모터 구동						          O
      버튼 동작						          O
      압력 센서 받기					      X
      심박 센서 받기					      X
      색인지 센서 빋기				       	  X
      색인지 위치까지 모터 구동		    	  X
      압력 센서 인식 시 모터 정지		  	  X
      정지 버튼 초기 위치로			     	  X (센서 값 들어올 때까지 이동)


      * 빠진 거 있으면 추가 바람 *


                    ※주의사항※
      모터가 끝에 닿으면 굉음나고 고장날까봐 무서우니 조심하세요


수정 할 사항
- 센서 값 잘 읽게 설정하기(현재 대략 3초 간격으로 토글됨, 배선 문제일 수도)
- 레일 따로 움직이게 하기

문제 사항
- 버튼 인식 잘 안됨
- 속도가 너무 느림

*/

#include <Wire.h>

#define Z_PUL 7
#define Z_DIR 8
#define X_PUL 5
#define X_DIR 6

#define Z_Limit1 22 // 모터쪽
#define Z_Limit2 23
#define X_Limit1 24 // 모터쪽
#define X_Limit2 25

#define STOPbtn 3
#define SLEEPbtn 2
#define STARTbtn 26

#define microStep 8 //스텝 and 펄스
#define rotation 12000 //회전수
#define baudrate 115200
#define speed 3

unsigned long long i;
volatile bool startflag = false;
volatile bool stop = true;
volatile bool start = false;
volatile bool sleep = false;
volatile bool FSR = false;

void setup()
{
	Wire.begin();
	Serial.begin( baudrate );
	pinMode( Z_PUL, OUTPUT );
	pinMode( Z_DIR, OUTPUT );
	pinMode( X_PUL, OUTPUT );
	pinMode( X_DIR, OUTPUT );
	pinMode( Z_Limit1, INPUT_PULLUP );
	pinMode( Z_Limit2, INPUT_PULLUP );
	pinMode( X_Limit1, INPUT_PULLUP );
	pinMode( X_Limit2, INPUT_PULLUP );
	pinMode( STOPbtn, INPUT_PULLUP );
	pinMode( SLEEPbtn, INPUT_PULLUP );
	pinMode( STARTbtn, INPUT_PULLUP );

	// 인터럽트를 핀에 설정
	attachInterrupt( digitalPinToInterrupt( STOPbtn ), _STOP, FALLING ); // 정지버튼 눌렸을 때 _STOP함수 실행
	attachInterrupt( digitalPinToInterrupt( SLEEPbtn ), _SLEEP, FALLING ); // 대기버튼 눌렸을 때 _SLEEP함수 실행
}

// 정지버튼 동작코드
void _STOP()
{
	stop = true;
	digitalWrite( Z_DIR, HIGH );
	digitalWrite( X_DIR, LOW );
	while ( !Z_Limit1 )
	{
		digitalWrite( Z_PUL, HIGH );
		delayMicroseconds( 1 );
		digitalWrite( Z_PUL, LOW );
		delayMicroseconds( 1 );
		
	}
	
	while ( !X_Limit1 )
	{
		digitalWrite( X_PUL, HIGH );
		delayMicroseconds( 1 );
		digitalWrite( X_PUL, LOW );
		delayMicroseconds( 1 );
	}
		
}

// 대기버튼 동작코드
void _SLEEP()
{
	sleep = !sleep;
}

// 시작버튼 동작코드
void _START()
{
	start = true;
	stop = false;
}

void loop()
{
	if ( digitalRead( STARTbtn ) )
	{
		startflag = true;
		
	}
	
	if ( startflag )
	{
		_START();
	}

	while ( start && !stop )
	{
		// 모터 반대 방향 설정 // Z : HIGH - 모터방향 X : HIGH - 모터 반대방향
		digitalWrite( Z_DIR, LOW );
		digitalWrite( X_DIR, HIGH );
		for ( i = 0; i < ( microStep * rotation ); i++ )
		{
			digitalWrite( Z_PUL, HIGH );
			delayMicroseconds( speed ); // 속도
			digitalWrite( Z_PUL, LOW );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, LOW );
			delayMicroseconds( speed );
			
			if ( !Z_Limit2 )
			{
				i = ( microStep * rotation );
			}
			
			else if ( !X_Limit2 )
			{
				i = ( microStep * rotation );
			}
			// 인터럽트 플래그 확인
			if ( stop ) break;
			while ( sleep )
			{
				// 대기 버튼이 눌렸을 때 대기 상태 유지
				// 이때 정지 버튼 작동시 종료
				if ( stop ) break;
				delay( 1 );

			}
		}
		if ( stop ) break;

		delay( 500 );

		// 모터 방향 설정
		digitalWrite( Z_DIR, HIGH );
		digitalWrite( X_DIR, LOW );
		for ( i = 0; i < ( microStep * rotation ); i++ )
		{
			digitalWrite( Z_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( Z_PUL, LOW );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, LOW );
			delayMicroseconds( speed );
			
			if ( !Z_Limit1 )
			{
				i = ( microStep * rotation );
			}
			
			else if ( !X_Limit1 )
			{
				i = ( microStep * rotation );
			}

			// 인터럽트 플래그 확인
			if ( stop ) break;
			while ( sleep )
			{
				// 대기 버튼이 눌려있을 때 대기 상태 유지
				if ( stop ) break;
				delay( 1 );
			}
		}
		if ( stop ) break;

		delay( 500 );
	}
}
