/*

     2024년 7월 10일 13:41 수정본
     작성자 : 김지환

ver5.2	전체적인 동작 완
		헤더파일, 코드 간결화
		정상 심박시 액추에이터 정지 추가
		
		동작 테스트 미실시
       
         
---------------------할일------------------------
      모터 구동                        O
      버튼 동작                        O
      압력 센서 받기                  O
      심박 센서 받기                  O
      색인지 센서 받기                  O
      색인지 위치까지 X_모터 구동         O
      압력 센서 인식 시 Z_모터 정지         O
      정지 버튼 초기 위치로               O
      액추에이터 연결                  O
      심박수 돌아오면 액추에이터 정지      X
      홀 센서로 압박 횟수 표시            X
-------------------------------------------------

         * 빠진 거 있으면 추가 바람 *


                    ※주의사항※
모터가 끝에 닿으면 굉음나고 고장날까봐 무서우니 조심하세요


수정 할 사항
- x
문제 사항
- 속도가 느림

*/

#include <Wire.h>
#include <RailMotor.h>

void _STOP();
void _SLEEP();
void _START();
void _RESET();
void _WHILE_SLEEP();
void _SSEBTN();
void _READCCC();
void _I2C_READ();

#define X_PUL 5
#define X_DIR 6
#define Z_PUL 7
#define Z_DIR 8

#define Z_LIMIT_B 22
#define Z_LIMIT_F 23
#define X_LIMIT_B 24
#define X_LIMIT_F 25
#define STOPbtn 26
#define SLEEPbtn 27

#define FSR_sensor A0
#define analCCC A1

int baudrate 115200;
int speed 1;
int slave 10;

volatile bool detect_act = false;
volatile bool stop = false;
volatile bool start = false;
volatile bool sleep = false;
volatile bool FSR_detected = false;
volatile int FSR_val = 0;
volatile bool do_Actuator = false;
volatile bool stopp = false;

volatile bool Z_LIMIT_BACK = false;
volatile bool X_LIMIT_BACK = false;
volatile bool Z_LIMIT_FOR = false;
volatile bool X_LIMIT_FOR = false;
volatile bool ccc_detect = false;
volatile bool normal_BPM = true;

X_motor RailMotor(X_PUL, X_DIR, speed, X_LIMIT_F, X_LIMIT_F);
Z_motor RailMotor(Z_PUL, Z_DIR, speed, Z_LIMIT_F, Z_LIMIT_B);

void setup()
{
	Wire.begin();
	Serial.begin( baudrate             );
	pinMode( STOPbtn, INPUT_PULLUP       );
	pinMode( SLEEPbtn, INPUT_PULLUP    );
	X_motor.setup();
	Z_motor.setup();

	cli();  // 인터럽트 비활성화
	TCCR5A = 0;
	TCCR5B = 0;
	TCNT5 = 0;
	OCR5A = 8000;  // 수가 줄수록 빨리 인터럽트
	TCCR5B |= ( 1 << WGM52 ); // CTC 모드
	TCCR5B |= ( 1 << CS52 ) | ( 1 << CS50 ); // 1024 분주 설정
	TIMSK5 |= ( 1 << OCIE5A ); // 타이머 비교 인터럽트 허용
	sei(); // 인터럽트 활성화
}

ISR( TIMER5_COMPA_vect )
{
	FSR_val = analogRead( FSR_sensor );
	if ( FSR_val > 100 ) FSR_detected = true;
	else FSR_detected = false;

	_READCCC();
}

void loop()
{
	_SSEBTN();
	
	_I2C_READ();
	
	if ( detect_act )
	{
		start = false;
		detect_act = false;
	}
	
	while ( ( start && !stop ) || !normal_BPM )
	{
		// X축 작동
		while ( !( stop || ccc_detect ) )
		{
			X_motor.moveBackward();
		
			_SSEBTN();
		}
	
		delay( 5 );
	
		// Z축 작동
		while ( !( FSR_detected || stop ) )
		{	
			Z_motor.moveBackward();
	
			_SSEBTN();
		}
	
		delay( 100 );
	
		if ( ( FSR_detected && ccc_detect ) )
		{
			start = false;
			do_Actuator = true;
			while ( 1 )
			{
				if ( do_Actuator )
				{
					Wire.beginTransmission( slave );
					Wire.write( 1 );
					Wire.endTransmission();
	
					do_Actuator = false;
				}
				
				_I2C_READ();

				if ( digitalRead( STOPbtn ) ) break;
				else if (normal_BPM) break;
			}

			Wire.beginTransmission( slave );
			Wire.write( 2 );
			Wire.endTransmission();
		}

		X_motor.Reset();
		Z_motor.Reset();
		detect_act = true;
		do_Actuator = false;
		start = false;
		stop = false;
		sleep = false;
		ccc_detect = false;
	}

}

// 정지버튼 동작코드
void _STOP()
{
   stop = true;
   X_motor.Reset();
   Z_motor.Reset();
}

// 대기버튼 동작코드
void _SLEEP()
{
   sleep = !sleep;
   delay( 300 );
   _WHILE_SLEEP();
}

// 시작버튼 동작코드
void _START()
{
   start = true;
	stop = false;
}

void _WHILE_SLEEP()
{
   while ( sleep )
   {
      // 대기 버튼이 눌렸을 때 대기 상태 유지
      // 이때 정지 버튼 작동시 종료
      if ( digitalRead( STOPbtn ) )
      {
         sleep = !sleep;
         stop = true;
      }
   
      else if ( digitalRead( SLEEPbtn ) )
      {
         _SLEEP();
      }
      delay( 1 );
   }

}

void _SSEBTN()
{
   // sleep 플래그 확인
   if ( digitalRead( SLEEPbtn ) )   _SLEEP();

   // stop 플래그 확인
   if ( digitalRead( STOPbtn ) )   _STOP();
}

void _READCCC()
{
	Serial.println( analogRead( analCCC ) );
	Serial.println( ccc_detect );
	if ( analogRead( analCCC ) > 100 ) ccc_detect = true;
	
	delay( 500 );
}

void _I2C_READ()
{
	Wire.requestFrom( slave, 3 );
	if ( Wire.available() )
	{
		int status = Wire.read(); // 첫 번째 바이트는 상태
		switch ( status )
		{
			case 0:
				start = false;
				break;
			case 1:
				_START();
				break;
			case 2:
				normal_BPM = false;
				break;
			case 9:
				normal_BPM = true;
				break;
			default :
				break;
		}
	}
}