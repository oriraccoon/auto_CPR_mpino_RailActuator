/*

      2024년 6월 2일자 수정본

ver2.0		광전 스위치 센서 동작 방식 작성
			X-Z순으로 동작
			
			동작테스트 미실시
			

-----------------할일---------------------
      모터 구동						          O
      버튼 동작						          O
      압력 센서 받기					      X
      심박 센서 받기					      X
      색인지 센서 빋기				       	  X
      색인지 위치까지 모터 구동		    	  X
      압력 센서 인식 시 모터 정지		  	  X
      정지 버튼 초기 위치로			     	  X (센서 값 들어올 때까지 이동)


      * 빠진 거 있으면 추가 바람 *


                    ※주의사항※
      모터가 끝에 닿으면 굉음나고 고장날까봐 무서우니 조심하세요


수정 할 사항
- 센서 값 잘 읽게 설정하기(현재 대략 3초 간격으로 토글됨, 배선 문제일 수도)
- 레일 따로 움직이게 하기

문제 사항
- 버튼 인식 잘 안됨
- 속도가 너무 느림

*/

#include <Wire.h>

#define Z_PUL 7
#define Z_DIR 8
#define X_PUL 5
#define X_DIR 6

#define STOPbtn 3
#define SLEEPbtn 2

#define test 22

#define microStep 8 //스텝 and 펄스
#define rotation 12000 //회전수
#define baudrate 115200
#define speed 10
#define slave_address 8

unsigned long long i;
int signal;
int b;
volatile bool stop = true;
volatile bool start = false;
volatile bool sleep = false;
volatile bool FSR = false;
volatile bool Z_LIMIT_BACK = false;
volatile bool Z_LIMIT_FOR = false;
volatile bool X_LIMIT_BACK = false;
volatile bool X_LIMIT_FOR = false;
//volatile bool Z_FORWARD = false;
//volatile bool Z_BACKWARD = false;
//volatile bool X_FORWARD = false;
//volatile bool X_BACKWARD = false;

void setup()
{
	Wire.begin();
	Serial.begin( baudrate );
	pinMode( Z_PUL, OUTPUT );
	pinMode( Z_DIR, OUTPUT );
	pinMode( X_PUL, OUTPUT );
	pinMode( X_DIR, OUTPUT );
	pinMode( test, INPUT_PULLUP );
	pinMode( STOPbtn, INPUT_PULLUP );
	pinMode( SLEEPbtn, INPUT_PULLUP );

	// 인터럽트를 핀에 설정
	attachInterrupt( digitalPinToInterrupt( STOPbtn ), _STOP, FALLING ); // 정지버튼 눌렸을 때 _STOP함수 실행
	attachInterrupt( digitalPinToInterrupt( SLEEPbtn ), _SLEEP, FALLING ); // 대기버튼 눌렸을 때 _SLEEP함수 실행
}

// 정지버튼 동작코드
void _STOP()
{
	stop = true;
	
	while ( !Z_LIMIT_BACK )
	{
		Wire.requestFrom(slave_address, 3);
		_WIRE_READ();
		
		_Z_BACKWARD();
		
		digitalWrite( Z_PUL, HIGH );
		delayMicroseconds( 1 );
		digitalWrite( Z_PUL, LOW );
		delayMicroseconds( 1 );
	}
	
	while ( !X_LIMIT_BACK )
	{
		Wire.requestFrom(slave_address, 3);
		_WIRE_READ();
		
		_X_BACKWARD();
		
		digitalWrite( X_PUL, HIGH );
		delayMicroseconds( 1 );
		digitalWrite( X_PUL, LOW );
		delayMicroseconds( 1 );
	}
		
}

// 대기버튼 동작코드
void _SLEEP()
{
	sleep = !sleep;
}

// 시작버튼 동작코드
void _START()
{
	start = true;
	stop = false;
}

void _Z_FORWARD()
{
	digitalWrite( Z_DIR, LOW );
}

void _Z_BACKWARD()
{
	digitalWrite( Z_DIR, HIGH );
}

void _X_FORWARD()
{
	digitalWrite( X_DIR, HIGH );
}

void _X_BACKWARD()
{
	digitalWrite( X_DIR, LOW );
}

void _WIRE_READ()
{
	if ( Wire.available() == 3 )
	{
		signal = Wire.read(); // 슬레이브로부터 전송된 신호 읽기
		switch ( signal )
		{
			case 0:
				// 변화 없음
				break;
			case 1:
				// 버튼이 눌렸습니다.
				_START();
				break;
			case 2:
				// 센서 1이 인식되었습니다.
				Z_LIMIT_BACK = true;
				break;
			case 3:
				// 센서 2가 인식되었습니다.
				Z_LIMIT_FOR = true;
				break;
			case 4:
				// 센서 3이 인식되었습니다.
				X_LIMIT_BACK = true;
				break;
			case 5:
				// 센서 4가 인식되었습니다.
				X_LIMIT_FOR = true;
				break;
			default:
				// 알 수 없는 신호
				Serial.println( "Unknown signal" );
				break;
		}
	}
}

void loop()
{
    Wire.requestFrom(slave_address, 3);
	_WIRE_READ();
	int pintest = digitalRead( test );
	Serial.println( pintest );
	
	while ( start && !stop && pintest )
	{
		// 색인지 센서 들어오면 정지
		// 모터 반대 방향 설정 // Z : HIGH - 모터방향 X : HIGH - 모터 반대방향
		_X_FORWARD();
		for ( i = 0; i < ( microStep * rotation ); i++ )
		{
			Wire.requestFrom(8, 3);
			_WIRE_READ();
			
			digitalWrite( X_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, LOW );
			delayMicroseconds( speed );
			
			if ( X_LIMIT_FOR )
			{
				while ( b == 3 )
				{
					b++;
					delay( 1000 );
				}
				b = 0;
				X_LIMIT_FOR = false;
				digitalWrite( X_PUL, LOW );
				stop = true;
			}
			// 인터럽트 플래그 확인
			if ( stop ) break;
			while ( sleep )
			{
				// 대기 버튼이 눌렸을 때 대기 상태 유지
				// 이때 정지 버튼 작동시 종료
				if ( stop )
				{
					sleep = !sleep;
					break;
				}
				delay( 1 );

			}
		}
		if ( stop ) break;

		delay( 5 );
		// 압력센서 들어오면 정지
		_Z_FORWARD();
		for ( i = 0; i < ( microStep * rotation ); i++ )
		{
			Wire.requestFrom(8, 3);
			_WIRE_READ();
			
			digitalWrite( Z_PUL, HIGH );
			delayMicroseconds( speed ); // 속도
			digitalWrite( Z_PUL, LOW );
			delayMicroseconds( speed );
			
			if ( Z_LIMIT_FOR )
			{
				while ( b == 3 )
				{
					b++;
					delay( 1000 );
				}
				b = 0;
				Z_LIMIT_FOR = false;
				digitalWrite( Z_PUL, LOW );
				stop = true;
			}
			
			// 인터럽트 플래그 확인
			if ( stop ) break;
			while ( sleep )
			{
				// 대기 버튼이 눌렸을 때 대기 상태 유지
				// 이때 정지 버튼 작동시 종료
				if ( stop )
				{
					sleep = !sleep;
					break;
				}
				delay( 1 );

			}
		}
		if ( stop ) break;

		delay( 5 );
		

		/*// 모터 방향 설정
		_Z_BACKWARD();
		_X_BACKWARD();
		for ( i = 0; i < ( microStep * rotation ); i++ )
		{
			Wire.requestFrom(8, 3);
			_WIRE_READ();			
			
			digitalWrite( Z_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( Z_PUL, LOW );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, LOW );
			delayMicroseconds( speed );
			

			
			
			if ( Z_LIMIT_BACK )
			{
				while ( b == 3 )
				{
					b++;
					delay( 1000 );
				}
				b = 0;
				Z_LIMIT_BACK = false;
				digitalWrite( Z_PUL, LOW );
				stop = true;
				break;
			}
			
			else if ( X_LIMIT_BACK )
			{
				while ( b == 3 )
				{
					b++;
					delay( 1000 );
				}
				b = 0;
				X_LIMIT_BACK = false;
				digitalWrite( X_PUL, LOW );
				stop = true;
				break;
			}

			// 인터럽트 플래그 확인
			if ( stop ) break;
			while ( sleep )
			{
				// 대기 버튼이 눌려있을 때 대기 상태 유지
				if ( stop )
				{
					sleep = !sleep;
					break;
				}
				delay( 1 );
			}
		}
		if ( stop ) break;

		delay( 5 );*/
		
	}
}
